---
import LanguageSelector from "./LanguageSelector.astro";

const { lang, currentPath } = Astro.props;
---

<footer
  id="social-footer"
  class="fixed top-3 md:top-[85vh] left-0 right-0 w-screen md:left-1/2 md:-translate-x-1/2 md:w-auto pb-8 lg:bottom-30 2xl:pb-50 transition-all duration-500 ease-in-out z-50"
>
  <ul
    class="flex justify-between md:justify-center w-full md:w-auto text-white opacity-80"
    aria-label="Social media"
  >
    <li class="ms-10 md:mr-2.5 text-xs">
      <a
        class="block hover:text-slate-200"
        href="https://github.com/CRodrigo47"
        target="_blank"
        rel="noreferrer noopener"
        aria-label="GitHub (opens in a new tab)"
        title="GitHub"
      >
        <span class="sr-only">GitHub</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 16 16"
          fill="currentColor"
          class="h-6 w-6"
          aria-hidden="true"
        >
          <path
            d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"
          ></path>
        </svg>
      </a>
    </li>
    
    <li class="mr-2.5 text-xs">
      <a
        class="block hover:text-slate-200"
        href="https://www.linkedin.com/in/christianrodalv/"
        target="_blank"
        rel="noreferrer noopener"
        aria-label="LinkedIn (opens in a new tab)"
        title="LinkedIn"
      >
        <span class="sr-only">LinkedIn</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="h-6 w-6"
          aria-hidden="true"
        >
          <path
            d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"
          ></path>
        </svg>
      </a>
    </li>
    <li>
      <LanguageSelector currentLang={lang} currentPath={currentPath} />
    </li>
  </ul>
</footer>

<style>
  #social-footer.scrolled {
    transform: translateX(-40vw);
  }
</style>

<script>
  function handleSocialMediaScroll() {
    const footer = document.getElementById("social-footer");
    if (!footer) return;

    // Función para verificar si estamos en resolución md o mayor
    const isMdOrLarger = () => window.innerWidth >= 768;

    const updateFooterPosition = () => {
      // Solo aplicar el comportamiento en resoluciones md y mayores
      if (isMdOrLarger()) {
        if (window.scrollY > 10) {
          footer.classList.add("scrolled");
        } else {
          footer.classList.remove("scrolled");
        }
      } else {
        // En resoluciones menores a md, asegurar que no tenga la clase scrolled
        footer.classList.remove("scrolled");
      }
    };

    const handleScroll = () => {
      updateFooterPosition();
    };

    const handleResize = () => {
      updateFooterPosition();
    };

    // Función para verificar la posición después de cambios de hash
    const handleHashChange = () => {
      // Usar setTimeout para esperar a que el navegador termine de scrollear al anchor
      setTimeout(() => {
        updateFooterPosition();
      }, 100);
    };

    // Función para verificar la posición al cargar la página
    const handlePageLoad = () => {
      // Usar setTimeout para asegurar que el DOM esté completamente renderizado
      setTimeout(() => {
        updateFooterPosition();
      }, 100);
    };

    // Ejecutar al cargar la página
    handlePageLoad();

    // Agregar event listeners
    window.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleResize);
    window.addEventListener("hashchange", handleHashChange);

    // También escuchar cuando la página se carga completamente
    window.addEventListener("load", handlePageLoad);

    // Cleanup function para cuando el componente se desmonte
    return () => {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", handleResize);
      window.removeEventListener("hashchange", handleHashChange);
      window.removeEventListener("load", handlePageLoad);
    };
  }

  // Ejecutar cuando el DOM esté listo
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", handleSocialMediaScroll);
  } else {
    handleSocialMediaScroll();
  }

  // Para casos de navegación SPA (si usas ViewTransitions de Astro)
  document.addEventListener("astro:page-load", () => {
    handleSocialMediaScroll();
  });
</script>